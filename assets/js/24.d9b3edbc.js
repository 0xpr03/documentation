(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{411:function(e,t,s){"use strict";s.r(t);var a=s(9),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"filtering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filtering"}},[e._v("#")]),e._v(" Filtering")]),e._v(" "),s("p",[e._v("When searching for documents, it is sometimes desired to filter through the results based on criteria, to provide the user with the most relevant response possible.")]),e._v(" "),s("p",[e._v("Meilisearch allows you to define filters thanks to a "),s("strong",[e._v("very simple query language")]),e._v(". Once defined, you can pass your filter to your search query, as a parameter.")]),e._v(" "),s("h3",{attrs:{id:"using-filters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-filters"}},[e._v("#")]),e._v(" Using Filters")]),e._v(" "),s("p",[e._v("In order to apply filtering to a search, simply add a filter expression to the "),s("code",[e._v("filters")]),e._v(" query parameter of your search. More on search query parameters "),s("a",{attrs:{href:"https://docs.meilisearch.com/references/search.html#query-parameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"the-query-language"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-query-language"}},[e._v("#")]),e._v(" The Query Language")]),e._v(" "),s("p",[e._v("In itself the query language is very simple, and allows you to filter results on any document field. For now it only allows you to query on fields that are either "),s("code",[e._v("number")]),e._v(", "),s("code",[e._v("boolean")]),e._v(", or "),s("code",[e._v("string")])]),e._v(" "),s("h3",{attrs:{id:"conditions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditions"}},[e._v("#")]),e._v(" Conditions")]),e._v(" "),s("p",[e._v("Conditions are the primitives of query filters. They are composed of three mandatory parameters "),s("code",[e._v("field OP value")]),e._v(" where:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("field")]),e._v(" refers to the document "),s("strong",[e._v("attribute")]),e._v(" to filter on ("),s("em",[e._v("e.g")]),e._v(" id, title...). It is either a single alphanumeric word or a quoted string: "),s("code",[e._v('"movie title"')]),e._v(", and "),s("code",[e._v("release_date")]),e._v(" are both valid "),s("code",[e._v("field")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("OP")]),e._v(" is the comparison operator, it can be one of "),s("code",[e._v("=")]),e._v(", "),s("code",[e._v("!=")]),e._v(", "),s("code",[e._v(">")]),e._v(", "),s("code",[e._v(">=")]),e._v(", "),s("code",[e._v("<")]),e._v(", or "),s("code",[e._v("<=")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("value")]),e._v(" is the test condition for which the filter shall filter upon.")])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("=")]),e._v(" and "),s("code",[e._v("!=")]),e._v(" operators check for equality and difference. For strings, they are both "),s("strong",[e._v("case insensitive")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"american ninja"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// matches "American Ninja"')]),e._v("\n")])])]),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[s("code",[e._v("string")]),e._v(" values are either double-quoted, single-quoted or a single unquoted word: "),s("code",[e._v('title = "Scream"')]),e._v(", "),s("code",[e._v("title = 'Scream'")]),e._v(" and "),s("code",[e._v("title = Scream")]),e._v(" are all valid syntaxes, "),s("code",[e._v("title = The Avengers")]),e._v(" is not.")])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v(">")]),e._v(", "),s("code",[e._v(">=")]),e._v(", "),s("code",[e._v("<")]),e._v(", and "),s("code",[e._v("<=")]),e._v(" apply "),s("strong",[e._v("only to numerical values")]),e._v(", and behave the standard way.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("As no specific schema is enforced at indexing, the filtering engine will try to coerce the type of "),s("code",[e._v("value")]),e._v(". This can lead to undefined behaviour when big floats are coerced into integers and reciprocally. For this reason, it is best to have homogeneous typing across fields, especially if numbers tend to become large.")])]),e._v(" "),s("h3",{attrs:{id:"expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[e._v("#")]),e._v(" Expressions")]),e._v(" "),s("p",[e._v("The simplest form of expressions are conditions. New expressions are created either by connecting other expressions together with logical connectives, or by grouping expressions with parentheses, "),s("em",[e._v("e.g")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Scream "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// a condition is an expression")]),e._v("\ntitle "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Scream "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The Avengers"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// also an expression")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Scream "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The Avengers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// use parentheses to isolate an expression")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("NOT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Scream "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The Avengers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// negate the whole expression")]),e._v("\nrating "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("NOT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Scream "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The Avengers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// and so on...")]),e._v("\n")])])]),s("h3",{attrs:{id:"logical-connectives"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logical-connectives"}},[e._v("#")]),e._v(" Logical Connectives")]),e._v(" "),s("p",[e._v("An arbitrary number of expressions can be connected together thanks to logical connectives. These connectives are:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("NOT")]),e._v(" negates the following expression, "),s("em",[e._v("e.g.")]),e._v(" "),s("code",[e._v("NOT title = Scream")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("OR")]),e._v(" performs a logical 'or' between two expressions, "),s("em",[e._v("e.g.")]),e._v(" "),s("code",[e._v('title = Scream OR title = "the avengers"')])]),e._v(" "),s("li",[s("code",[e._v("AND")]),e._v(" performs a logical 'and' between two expressions, "),s("em",[e._v("e.g.")]),e._v(" "),s("code",[e._v('title = Dumbo AND title = "Tim Burton"')])])]),e._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[s("code",[e._v("NOT")]),e._v(" has the highest precedence."),s("br"),e._v(" "),s("code",[e._v("NOT")]),e._v(" precedence is higher than "),s("code",[e._v("AND")]),e._v("."),s("br"),e._v(" "),s("code",[e._v("AND")]),e._v(" precedence is higher than "),s("code",[e._v("OR")]),e._v("."),s("br"),e._v(" "),s("code",[e._v("OR")]),e._v(" has the lowest precedence."),s("br"),e._v("\nThis means that "),s("code",[e._v('NOT title = Scream OR title = "The Avengers"')]),e._v(" is effectively evaluated "),s("code",[e._v('(NOT title = Scream) OR title = "The Avengers"')]),e._v(", and "),s("code",[e._v('title = Scream OR title = "The Avengers" AND release_date > 795484800')]),e._v(" is effectively evaluated "),s("code",[e._v('title = Scream OR (title = "The Avengers" AND release_date > 795484800)')])])]),e._v(" "),s("h3",{attrs:{id:"a-note-on-performance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-note-on-performance"}},[e._v("#")]),e._v(" A Note on Performance")]),e._v(" "),s("p",[e._v("MeiliSearch is intended to be a flexible tool. For this reason, we decided not to put any restrictions on which fields the user can filter on, nor on how the queries are built. It is important to understand that it can lead to performance issues in some cases. We are currently working on new features to address this issue, such as "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Faceted_search",target:"_blank",rel:"noopener noreferrer"}},[e._v("faceting"),s("OutboundLink")],1),e._v(" to allow you to efficiently narrow down the number of candidates to a query, and thus improving performances of plain filters, even in worst cases.")]),e._v(" "),s("p",[e._v("Also consider that "),s("code",[e._v("OR")]),e._v(" and "),s("code",[e._v("AND")]),e._v(" are left associative, meaning that the left-hand side is always evaluated first. If the left-hand side of an "),s("code",[e._v("OR")]),e._v(" is "),s("code",[e._v("true")]),e._v(" or the left-hand side of a "),s("code",[e._v("AND")]),e._v(" is "),s("code",[e._v("false")]),e._v(", then the right-hand side won't be evaluated. You can sometimes get performance improvements by building your queries in such a way that the right-hand side of a connective is evaluated only when necessary.")]),e._v(" "),s("h3",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),s("p",[e._v("Suppose that you have a collection of movies, in the following JSON format:")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"495925"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"title"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Doraemon the Movie:Nobita\'s Treasure Island"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"director"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Fujiko Fujio"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"poster"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://image.tmdb.org/t/p/w1280/cmJ71gdZxCqkMUvGwWgSg3MK7pC.jpg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"overview"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The story is based on Robert Louis Stevenson\'s Treasure Island novel."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"release_date"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1520035200")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"329996"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"title"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Dumbo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"director"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Tim Burton"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"poster"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://image.tmdb.org/t/p/w1280/279PwJAcelI4VuBtdzrZASqDPQr.jpg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"overview"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"A young elephant, whose oversized ears enable him to fly, helps..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"release_date"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1553644800")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"299536"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"title"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Avengers:Infinity War"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"director"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Joe Russo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"poster"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://image.tmdb.org/t/p/w1280/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"overview"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"As the Avengers and their allies have continued to protect..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"release_date"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1524618000")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"458723"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"title"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Us"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"director"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Jordan Peele"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"poster"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://image.tmdb.org/t/p/w1280/ux2dU1jQ2ACIMShzB3yP93Udpzc.jpg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"overview"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Husband and wife Gabe and Adelaide Wilson take their..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"release_date"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1552521600")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    ...\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("Say you want to only show to your user movies that were released after a certain date, then you can use the following filter:")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("release_date "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("795484800")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// march 18, 1995")]),e._v("\n")])])]),s("p",[e._v("Querying on "),s("code",[e._v("Avengers")]),e._v(", the above example results in the following CURL command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" --get "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://localhost:7700/indexes/movies/search'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'q=Avengers'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'filters=release_date > 795484800'")]),e._v("\n")])])]),s("p",[e._v("Now imagine that we only want Batman movies released after the 18 of march 1995, and directed by either Tim Burton or Christopher Nolan, then you would use this filter:")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("release_date "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("795484800")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("director "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Tim Burton"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" director "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Christopher Nolan"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("Querying on "),s("code",[e._v("Batman")]),e._v(", the above example results in the following CURL command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" --get "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://localhost:7700/indexes/movies/search'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'q=Batman'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'filters=release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan"\'')]),e._v("\n")])])]),s("p",[e._v("Note that filtering on string is case insensitive. Here, the parentheses are mandatory, as "),s("code",[e._v("AND")]),e._v(" has a higher precedence.")]),e._v(" "),s("p",[e._v("If we want to select only horror movies from our favorite director:")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("director "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Jordan Peele"')]),e._v("\n")])])]),s("p",[e._v("Querying on "),s("code",[e._v("horror")]),e._v(", the above example results in the following CURL command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" --get "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://localhost:7700/indexes/movies/search'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'q=horror'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'filters=director = \"Jordan Peele\"'")]),e._v("\n")])])]),s("p",[e._v("If we want to find the "),s("code",[e._v("Planet of the Apes")]),e._v(" movies that have been well rated but we want to ignore the one directed by Tim Burton:")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("rating "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("NOT")]),e._v(" director "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Tim Burton"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("Querying on "),s("code",[e._v("Planet of the Apes")]),e._v(", the above example results in the following CURL command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" --get "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://localhost:7700/indexes/movies/search'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'q=Planet of the Apes'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --data-urlencode "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'filters=rating >= 3 AND (NOT director = \"Tim Burton\")'")]),e._v("\n")])])]),s("p",[e._v('Finally, imagine that you want to filter on "id". You would probably do this:')]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"299536"')]),e._v("\n")])])]),s("p",[e._v("However, this would be a very bad idea. "),s("code",[e._v("id")]),e._v(" uniquely identifies a movie. Therefore, only one document can match the user query. The filtering engine would have to search through all candidate documents to find the only possible match. This would be highly inefficient and should be avoided. We are currently working on a "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Faceted_search",target:"_blank",rel:"noopener noreferrer"}},[e._v("faceted search"),s("OutboundLink")],1),e._v(" feature, especially optimized for this kind of need. It is important to understand that filtering and querying don't have the same performances.")])])}),[],!1,null,null,null);t.default=r.exports}}]);